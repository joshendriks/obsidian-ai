name: Build docker image

on:
  push:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: ./Dockerfile
            type: dockerfile
            image: ghcr.io/joshendriks/live-sync
          - dockerfile: ./Dockerfile
            type: dotnet
            image: ghcr.io/joshendriks/image2
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ matrix.image }}

      - name: Build and push live-sync
        if: ${{ matrix.type == 'dockerfile' }}
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Setup .NET
        if: ${{ matrix.type == 'dotnet' }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Build and push ai-service
        if: ${{ matrix.type == 'dotnet' }}
        run: |
          cd processor/obsidian-ai
          dotnet publish --os linux --arch x64 -c Release -p PublishProfile=DefaultContainer -p ContainerRegistry=${{ env.REGISTRY }} -p ContainerRepository=${{ matrix.image }} -p ContainerImageTag=latest
